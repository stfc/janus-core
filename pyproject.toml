[tool.poetry]
name = "janus-core"
version = "0.6.4.1"
description = "Tools for machine learnt interatomic potentials"
authors = [
    "Elliott Kasoar",
    "Federica Zanca",
    "Patrick Austin",
    "David Mason",
    "Jacob Wilkins",
    "Alin M. Elena",
]
readme = "README.md"
packages = [{include = "janus_core"}]
classifiers = [
    "Programming Language :: Python",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Development Status :: 3 - Alpha",
]
repository = "https://github.com/stfc/janus-core/"
documentation = "https://stfc.github.io/janus-core/"

[tool.poetry.scripts]
janus = "janus_core.cli.janus:app"

[tool.poetry.dependencies]
ase = "^3.23"
codecarbon = "^2.5.0"
mace-torch = "0.3.6"
numpy = "^1.26.4"
phonopy = "^2.23.1"
python = "^3.9"
pyyaml = "^6.0.1"
rich = "^13.9.1"
seekpath = "^1.9.7"
spglib = "^2.3.0"
torch = ">= 2.1, <= 2.2" # Range required for dgl
torch-dftd = "0.4.0"
typer = "^0.12.5"
typer-config = "^1.4.0"

alignn = { version = "2024.5.27", optional = true }
chgnet = {version = "0.3.8", optional = true}
dgl = { version = "2.1.0", optional = true } # Pin due to matgl installation issues
matgl = { version = "1.1.3", optional = true}
sevenn = { version = "0.10.0", optional = true }
torchdata = {version = "0.7.1", optional = true} # Pin due to dgl issue
torch_geometric = { version = "^2.5.3", optional = true }
ruff = "^0.5.7"

[tool.poetry.extras]
all = ["alignn", "chgnet", "matgl", "dgl", "torchdata", "sevenn", "torch_geometric"]
alignn = ["alignn"]
chgnet = ["chgnet"]
m3gnet = ["matgl", "dgl", "torchdata"]
sevennet = ["sevenn", "torch_geometric"]

[tool.poetry.group.dev.dependencies]
coverage = {extras = ["toml"], version = "^7.4.1"}
pgtest = "^1.3.2"
pytest = "^8.0"
pytest-cov = "^4.1.0"
tox = "^4.12.1"
wheel = "^0.42"

[tool.poetry.group.pre-commit]
optional = true
[tool.poetry.group.pre-commit.dependencies]
pre-commit = "^3.6.0"
ruff = "^0.5.6"

[tool.poetry.group.docs]
optional = true
[tool.poetry.group.docs.dependencies]
furo = "^2024.1.29"
markupsafe = "<2.1"
numpydoc = "^1.6.0"
sphinx = "^7.2.6"
sphinxcontrib-contentui = "^0.2.5"
sphinxcontrib-details-directive = "^0.1"
sphinx-copybutton = "^0.5.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
# Configuration for [pytest](https://docs.pytest.org)
python_files = "test_*.py"
addopts = '--cov-report xml'
pythonpath = ["."]

[tool.coverage.run]
# Configuration of [coverage.py](https://coverage.readthedocs.io)
# reporting which lines of your plugin are covered by tests
source=["janus_core"]

[tool.ruff]
exclude = ["conf.py"]
target-version = "py39"

[tool.ruff.lint]
# Ignore complexity
ignore = ["C901"]
select = [
    # flake8-bugbear
    "B",
    # pylint
    "C", "R",
    # pydocstyle
    "D",
    # pycodestyle
    "E", "W",
    # Pyflakes
    "F",
    # pyupgrade
    "I",
    # pep8-naming
    "N",
    # isort
    "UP",
]

[tool.ruff.lint.isort]
force-sort-within-sections = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pylint]
max-args = 10

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = false

[tool.numpydoc_validation]
# report on all checks, except the below
checks = [
    "all",
    "EX01",
    "SA01",
    "ES01",
]
# Don't report on objects that match any of these regex
exclude = [
    ".__weakref__$",
    ".__repr__$",
]
